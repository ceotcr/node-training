const fs = require('fs');
console.log('游댯 1. Start of script');
// Timer: setTimeout
setTimeout(() => {
    console.log('游릭 4. setTimeout 0ms');
    process.nextTick(() => {
        console.log('游리 5. nextTick inside setTimeout');
    });
    Promise.resolve().then(() => {
        console.log('游리 6. Promise inside setTimeout');
    });
}, 0);
// Timer: setInterval (runs repeatedly, shown once here)
const interval = setInterval(() => {
    console.log('游릭 7. setInterval');
    clearInterval(interval); // only show once for demo
}, 0);
// I/O Async (will go into the poll phase)
fs.readFile(__filename, () => {
    console.log('游릮 10. fs.readFile (I/O)');
    setImmediate(() => {
        console.log('游릮 11. setImmediate inside fs.readFile');
    });
    setTimeout(() => {
        console.log('游릮 12. setTimeout inside fs.readFile');
    }, 0);
});
// Custom async-style callback
function customAsyncCallback(cb) {
    setTimeout(() => {
        cb('游댮 13. Custom callback after async work');
    }, 10);
}
customAsyncCallback(message => {
    console.log(message);
});
console.log('游댯 14. End of script');
// Microtask: process.nextTick
process.nextTick(() => {
    console.log('游리 2. process.nextTick');
});
// Microtask: Promise
Promise.resolve().then(() => {
    console.log('游리 3. Promise.then');
});
// Check phase: setImmediate
setImmediate(() => {
    console.log('游릭 8. setImmediate');
    process.nextTick(() => {
        console.log('游리 9. nextTick inside setImmediate');
    });
});

/*
> node .\q1.js
游댯 1. Start of script
游댯 14. End of script
游리 2. process.nextTick
游리 3. Promise.then
游릭 4. setTimeout 0ms
游리 5. nextTick inside setTimeout
游리 6. Promise inside setTimeout
游릭 7. setInterval
游릭 8. setImmediate
游리 9. nextTick inside setImmediate
游릮 10. fs.readFile (I/O)
游릮 11. setImmediate inside fs.readFile
游릮 12. setTimeout inside fs.readFile
游댮 13. Custom callback after async work
*/